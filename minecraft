#!/bin/ksh

grey="\033[01;30m"
red="\033[01;31m"
green="\033[01;32m"
yellow="\033[01;33m"
blue="\033[01;34m"
magenta="\033[01;35m"
cyan="\033[01;35m"
bold="\033[01;39m"

white="\033[0m"

PREFIX="/usr/local"
JAVA_HOME="/usr/local/jdk-1.7.0/"

function usage {
	 cat <<EOF
  minecraft options:
    -f force download of Minecraft.js
    -r re-run the initial configuration
EOF
}

INITIAL=true
CONF_FILE=~/.minecraftrc
CONF_DIR=~/minecraft
MC_URL="https://s3.amazonaws.com/Minecraft.Download/launcher/Minecraft.jar"

function get_conf_var {
    RET=''
    if [ -f $CONF_FILE ]; then
	RET=$( grep $1 $CONF_FILE | awk -F\: '{print $2}' )
    else
	return 1
    fi

    if [ "${RET}X" == "X" ]; then
	return 1
    else
	echo $RET
    fi
}

function fetch {
    ftp $1
}

function msg {
    echo "${bold}${1}${white}"
}

function error {
    echo "${red}${1}${white}"
    exit 1
}

if [ -d $CONF_DIR ]; then
    if [ -f $CONF_FILE ]; then
	INITIAL=false
    fi
else
    mkdir $CONF_DIR
fi

if [ ! -d $CONF_DIR ]; then
    INITIAL=true
fi

if [ $INITIAL == true ]; then

   FULL_PATH=$(get_conf_var "FULL_PATH" || echo "")
   USERID=$(get_conf_var "USERID" || echo "")

   if [ "${FULL_PATH}X" == "X" ]; then
       msg "Directory to download Minecraft.jar to? : "
       
       read FETCH_TO
       
       if [ -d $FETCH_TO ]; then
	   cd $FULL_PATH
	   fetch $MC_URL

	   FULL_PATH="${PWD}/Minecraft.jar"
	   msg "Downloaded to ${FULL_PATH}"
       else
	   error "Path doesn't exist!"
       fi

       mkdir -p $CONF_DIR || error "Can't make $CONF_DIR"
   else
       msg "Downloading Minecraft.jar to ${FULL_PATH}"
       fetch $MC_URL
   fi
   
   FULL_PATH="${PWD}/Minecraft.jar"
   
   msg "Downloaded to ${FULL_PATH}"
   if [ "${USERID}X" == "X" ]; then
       msg "Please enter your minecraft user id: "
       
       read USERID
   fi
      
   cat <<EOF > $CONF_DIR/launcher_profiles.json
{
  "profiles": {
    "${USERID}": {
      "name": "${USERID}",
      "javaDir": "${PREFIX}/bin/minecraft"
    }
  }
}
EOF
   touch $CONF_FILE
   echo "USERID:${USERID}" > $CONF_FILE
   echo "FULL_PATH:${FULL_PATH}" >> $CONF_FILE

   msg "${CONF_FILE} written, now you can now just run 'minecraft' to start the game!"
else
  WORKDIR="${PREFIX}/share/lwjgl"
  LWJGL_JLP_OVRD="$WORKDIR/"
  LWJGL_OVRD="$WORKDIR/lwjgl.jar"
  LWJGL_UTIL_OVRD="$WORKDIR/lwjgl_util.jar"

  export JH=${JAVA_HOME}

  FULL_PATH=$(get_conf_var "FULL_PATH")

  if [ ! -e $FULL_PATH ]; then
      ftp -o $FULL_PATH $MC_URL
  fi

  build_classpath() {
    j=0
    ocp=`echo ${1} | sed 's/:/ /g'`
    for p in ${ocp}
    do
        if [[ $p == *lwjgl-* ]]
        then
            ncp[$j]=${LWJGL_OVRD}
        elif [[ $p == *lwjgl_util* ]]
        then
            ncp[$j]=${LWJGL_UTIL_OVRD}
        else
            ncp[$j]=${p}
        fi
        j=$(( j + 1 ))
    done

    cp=`echo ${ncp[@]} | sed 's/ /:/g'`
  }

  # check for the huge list of args, if we don't have them
  # we were launched by the user. if we do we were launched
  # by the mc launcher
  TARGS=$(echo -n ${@})
  if [ "${TARGS}X" == "X" ]; then
      # Starting Minecraft.jar here
      ${JH}/jre/bin/java -jar ${FULL_PATH}
  else
      i=0
      for var in "${@}"
      do
	  if [[ "$var" == -Djava.library* ]]
	  then
              args[$i]="-Djava.library.path=${LWJGL_JLP_OVRD} -Dos.version=OpenBSD_5.6"
	  elif [[ "$var" == *lwjgl_util* ]]
	  then
              build_classpath "${var}"
              args[$i]="$cp"
	  else
              args[$i]=$var
	  fi
          i=$(( i + 1 ))
      done
      # This is sent to the minecraft launcher
      ${JH}/jre/bin/java ${args[@]} -jar ${FULL_PATH}
  fi
fi
